class EventObserver < BaseObserver
  include ApplicationHelper

  observe :event

  def before_save(event)
    if event.enterprise_id.nil?
      enterprise_id = event.project.try(:enterprise_id)
      enterprise_id ||= event.target.enterprise_id if event.target.respond_to?(:enterprise_id)
      event.enterprise_id = enterprise_id
    end
  end

  def after_commit(event)
    if event.data.present?
      event_data_obj = EventData.find_or_create_by_event_id(event.id)
      event_data_obj.update_attribute(:data, event.data) unless event_data_obj.data == event.data
      event.event_data_obj = event_data_obj
    end

    if transaction_action?(event, :create)
      if event.push?
        hook_name = event.tag? ? :tag_push_hooks : :push_hooks
        WebHook.execute(hook_name, event)
      end
    end
  end

  def after_create(event)
    project = Project.find_by_id(event.project_id)
    if project.present? && event.action != Event::COMMENTED
      attrs = { last_activity_at: event.created_at }
      attrs.merge!({ last_push_at: event.created_at }) if event.action == Event::PUSHED
      project.update_attributes(attrs)
    end

    # clear some cache_key after event create
    event.expire_cache

    if event.push?
      update_last_push_event(event)

      # pages
      if event.project.page && event.project.effective_pages_pro?
        event.project.page.execute_hook
      end

      # notification
      # 仓库 push 事件，现只推送消息给 watch 仓库的用户
      if event.project.watches_count > 0
        Notification::ProjectService.new(action: :push, actor: event.author_id, project: event.project, event: event).execute
      end
    end

    # 统计贡献度
    Contribution.collect_by_event(event)

    # 企业版统计issue、pr、milestone数据量
    if event.author.present? && event.author.in_the_enterprise?(event.enterprise)
      ProjectStatistic.event_statistics_add(event, event.enterprise_id, event.project_id)
      UserStatistic.event_statistics_add(event, event.enterprise_id, event.project_id, event.author.id)
    end
  end

  private

  def update_last_push_event(event)
    if show_last_push_widget?(event) && !has_pull_requested?(event)
      event.author.set_recent_push(event.id)
    end
  end

  def show_last_push_widget?(event)
    event && event.last_push_to_non_root? && !event.rm_ref? && event.project &&
    (event.project.parent.try(:pull_requests_enabled) || event.project.pull_requests_enabled)
  end
end

class Book
  attr_accessor :title, :subtitle
  def lend_to(user)
    puts "Lending to #{user}"
    #...
  end

  def self.deprecate(old_method, new_method)
    define_method(old_method) do |*args, &block|
      warn "Warning: #{old_method}() is deprecated. Please use #{new_method}()."
      send(new_method, *args, &block)
    end
  end

  deprecate :Get_Title, :title
  deprecate :Set_Title, :title=
  deprecate :Lend_to_user, :lend_to
  deprecate :title2, :subtitle
  deprecate :title2=, :subtitle=
end

class Myclass
  def Myclass
    def self.class_method
      #...
    end
  end
end

def Myclass.class_method
    #...
end

class Myclass
  class << self
    def class_method
      #this is a class_method too
    end
  end
end
